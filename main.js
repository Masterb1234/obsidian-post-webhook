/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PostWebhookPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/settings/WebhookSettingsTab.ts
var import_obsidian2 = require("obsidian");

// src/settings/components/WebhookItem.ts
var import_obsidian = require("obsidian");
var WebhookItem = class {
  constructor(container, webhook, index, onUpdate, onRemove) {
    this.container = container;
    this.webhook = webhook;
    this.index = index;
    this.onUpdate = onUpdate;
    this.onRemove = onRemove;
    this.display();
  }
  display() {
    new import_obsidian.Setting(this.container).setName("Webhook Name").setDesc("Enter a name for this Webhook").addText((text) => text.setValue(this.webhook.name).onChange(async (value) => {
      await this.onUpdate(this.index, { name: value });
    }));
    new import_obsidian.Setting(this.container).setName("Webhook URL").setDesc("Enter the URL for this Webhook").addText((text) => text.setValue(this.webhook.url).onChange(async (value) => {
      await this.onUpdate(this.index, { url: value });
    }));
    new import_obsidian.Setting(this.container).setName("Insert Response").setDesc("Append Webhook response to the note").addToggle((toggle) => toggle.setValue(this.webhook.attachResponse).onChange(async (value) => {
      await this.onUpdate(this.index, { attachResponse: value });
    }));
    new import_obsidian.Setting(this.container).setName("Exclude Attachments").setDesc("Do not send any attachments with this Webhook").addToggle((toggle) => toggle.setValue(this.webhook.excludeAttachments || false).onChange(async (value) => {
      await this.onUpdate(this.index, { excludeAttachments: value });
    }));
    new import_obsidian.Setting(this.container).setName("Include Webhook context").setDesc("Enable adding another note with context before sending this Webhook").addToggle((toggle) => toggle.setValue(this.webhook.includeVariableNote || false).onChange(async (value) => {
      await this.onUpdate(this.index, { includeVariableNote: value });
    }));
    new import_obsidian.Setting(this.container).addButton((button) => button.setButtonText("Remove Webhook").setClass("mod-warning").onClick(async () => {
      await this.onRemove(this.index);
    }));
  }
};

// src/settings/WebhookSettingsTab.ts
var WebhookSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.displayWebhooks();
    this.displayAddWebhookButton();
  }
  displayWebhooks() {
    this.plugin.settings.webhooks.forEach((webhook, index) => {
      const webhookContainer = this.containerEl.createDiv();
      webhookContainer.addClass("webhook-container");
      new WebhookItem(
        webhookContainer,
        webhook,
        index,
        this.updateWebhook.bind(this),
        this.removeWebhook.bind(this)
      );
      webhookContainer.createEl("hr");
    });
  }
  displayAddWebhookButton() {
    new import_obsidian2.Setting(this.containerEl).addButton((button) => button.setButtonText("Add Webhook").onClick(async () => {
      this.plugin.settings.webhooks.push({
        id: crypto.randomUUID(),
        name: "New Webhook",
        url: "",
        attachResponse: false,
        excludeAttachments: false,
        includeVariableNote: false
      });
      await this.plugin.saveSettings();
      this.display();
    }));
  }
  async updateWebhook(index, updates) {
    this.plugin.settings.webhooks[index] = {
      ...this.plugin.settings.webhooks[index],
      ...updates
    };
    await this.plugin.saveSettings();
  }
  async removeWebhook(index) {
    this.plugin.settings.webhooks.splice(index, 1);
    await this.plugin.saveSettings();
    this.display();
  }
};

// src/commands/WebhookCommands.ts
var import_obsidian9 = require("obsidian");

// src/utils/SelectionCache.ts
var SelectionCache = class {
  constructor() {
    this.CACHE_TIMEOUT = 5e3;
    this.cache = {
      text: "",
      timestamp: 0
    };
    this.setupMutationObserver();
    this.setupSelectionListener();
  }
  setupMutationObserver() {
    this.observer = new MutationObserver(() => {
      this.updateFromEditor();
    });
    this.observer.observe(document.body, {
      childList: true,
      subtree: true,
      characterData: true
    });
  }
  setupSelectionListener() {
    document.addEventListener("selectionchange", () => {
      this.updateFromEditor();
    });
  }
  updateFromEditor() {
    var _a, _b;
    const activeLeaf = (_b = (_a = window.app) == null ? void 0 : _a.workspace) == null ? void 0 : _b.activeLeaf;
    if (!activeLeaf)
      return;
    const view = activeLeaf.view;
    const editor = view == null ? void 0 : view.editor;
    if (editor == null ? void 0 : editor.getSelection) {
      const selection = editor.getSelection();
      if (selection) {
        this.updateCache(selection);
      }
    }
  }
  updateCache(text) {
    this.cache = {
      text,
      timestamp: Date.now()
    };
  }
  getSelection() {
    var _a, _b;
    const activeLeaf = (_b = (_a = window.app) == null ? void 0 : _a.workspace) == null ? void 0 : _b.activeLeaf;
    if (!activeLeaf)
      return "";
    const view = activeLeaf.view;
    const editor = view == null ? void 0 : view.editor;
    if (editor == null ? void 0 : editor.getSelection) {
      const selection = editor.getSelection();
      if (selection) {
        return selection;
      }
    }
    const currentTime = Date.now();
    if (currentTime - this.cache.timestamp < this.CACHE_TIMEOUT) {
      return this.cache.text;
    }
    return "";
  }
  destroy() {
    var _a;
    (_a = this.observer) == null ? void 0 : _a.disconnect();
  }
};

// src/services/WebhookService.ts
var import_obsidian8 = require("obsidian");

// src/services/AttachmentService.ts
var import_obsidian4 = require("obsidian");

// src/utils/MimeTypeUtils.ts
var MimeTypeUtils = class {
  static getMimeType(extension) {
    var _a;
    return this.mimeTypes[(_a = extension == null ? void 0 : extension.toLowerCase()) != null ? _a : ""] || "application/octet-stream";
  }
  static getExtensionFromMimeType(mimeType) {
    for (const [ext, mime] of Object.entries(this.mimeTypes)) {
      if (mimeType.includes(mime))
        return `.${ext}`;
    }
    return ".bin";
  }
};
MimeTypeUtils.mimeTypes = {
  png: "image/png",
  jpg: "image/jpeg",
  jpeg: "image/jpeg",
  gif: "image/gif",
  webp: "image/webp",
  svg: "image/svg+xml",
  mp3: "audio/mpeg",
  wav: "audio/wav",
  ogg: "audio/ogg",
  m4a: "audio/mp4",
  mp4: "video/mp4",
  webm: "video/webm",
  ogv: "video/ogg",
  mov: "video/quicktime",
  pdf: "application/pdf",
  doc: "application/msword",
  docx: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  json: "application/json",
  xml: "application/xml",
  zip: "application/zip"
};

// src/utils/YAMLParser.ts
var import_obsidian3 = require("obsidian");
var YAMLParser = class {
  static async getExcludedAttachments(content) {
    try {
      const info = (0, import_obsidian3.getFrontMatterInfo)(content);
      if (!info.exists || !info.frontmatter) {
        return [];
      }
      let frontmatter;
      try {
        frontmatter = (0, import_obsidian3.parseYaml)(info.frontmatter);
      } catch (yamlError) {
        console.warn("Invalid YAML frontmatter:", yamlError);
        return [];
      }
      if (!frontmatter || typeof frontmatter !== "object") {
        return [];
      }
      const excludeAttachment = frontmatter["exclude-attachment"];
      if (!excludeAttachment) {
        return [];
      }
      if (typeof excludeAttachment === "string") {
        return [excludeAttachment];
      }
      if (Array.isArray(excludeAttachment)) {
        return excludeAttachment.filter((item) => typeof item === "string").map((item) => item.trim()).filter(Boolean);
      }
      return [];
    } catch (error) {
      console.error("Error processing frontmatter:", error);
      return [];
    }
  }
  static isValidYaml(content) {
    try {
      const info = (0, import_obsidian3.getFrontMatterInfo)(content);
      if (!info.exists || !info.frontmatter) {
        return true;
      }
      (0, import_obsidian3.parseYaml)(info.frontmatter);
      return true;
    } catch (error) {
      return false;
    }
  }
};

// src/services/AttachmentService.ts
var AttachmentService = class {
  static async getAttachments(app, file, excludeAll = false) {
    if (excludeAll) {
      return [];
    }
    const attachments = [];
    const cache = app.metadataCache.getFileCache(file);
    if (!cache) {
      return attachments;
    }
    const fileContent = await app.vault.read(file);
    const excludeList = await YAMLParser.getExcludedAttachments(fileContent);
    await this.processEmbeds(app, file, cache.embeds, excludeList, attachments);
    return attachments;
  }
  static async processEmbeds(app, file, embeds, excludeList, attachments) {
    if (!embeds)
      return;
    for (const embed of embeds) {
      if (!embed.link)
        continue;
      const linkedFile = app.metadataCache.getFirstLinkpathDest(embed.link, file.path);
      if (!linkedFile || !(linkedFile instanceof import_obsidian4.TFile) || excludeList.includes(linkedFile.name)) {
        continue;
      }
      const attachment = await this.processAttachment(app, linkedFile);
      if (attachment) {
        attachments.push(attachment);
      }
    }
  }
  static async processAttachment(app, file) {
    try {
      const arrayBuffer = await app.vault.readBinary(file);
      const base64Data = (0, import_obsidian4.arrayBufferToBase64)(arrayBuffer);
      const extension = file.extension.toLowerCase();
      const mimeType = MimeTypeUtils.getMimeType(extension);
      return {
        name: file.name,
        type: extension,
        mimeType,
        size: arrayBuffer.byteLength,
        data: base64Data,
        path: file.path
      };
    } catch (error) {
      console.error(`Failed to process attachment ${file.name}:`, error);
      return null;
    }
  }
};

// src/services/PayloadService.ts
var import_obsidian5 = require("obsidian");
var PayloadService = class {
  static createPayload(content, filename, attachments, selectedText, variableNote) {
    const info = (0, import_obsidian5.getFrontMatterInfo)(content);
    let payload;
    if (!info.exists) {
      payload = {
        content: selectedText || content,
        filename,
        timestamp: Date.now(),
        attachments
      };
    } else {
      const frontmatter = (0, import_obsidian5.parseYaml)(info.frontmatter);
      const noteContent = selectedText || content.slice(info.contentStart).trim();
      payload = {
        ...frontmatter,
        content: noteContent,
        filename,
        timestamp: Date.now(),
        attachments
      };
    }
    if (variableNote == null ? void 0 : variableNote.variables) {
      payload = {
        ...payload,
        ...variableNote.variables
      };
    }
    return payload;
  }
};

// src/utils/ContentTypeUtils.ts
var ContentTypeUtils = class {
  static isTextContent(contentType = "") {
    const textTypes = [
      "text/",
      "application/json",
      "application/xml",
      "application/javascript",
      "application/ecmascript",
      "application/x-httpd-php",
      "application/x-yaml"
    ];
    contentType = contentType.toLowerCase();
    return textTypes.some((type) => contentType.includes(type));
  }
};

// src/utils/FileUtils.ts
var FileUtils = class {
  static generateFilename(contentType) {
    const extension = MimeTypeUtils.getExtensionFromMimeType(contentType);
    const timestamp = Date.now();
    return `webhook-response-${timestamp}${extension}`;
  }
};

// src/services/ResponseHandler.ts
var ResponseHandler = class {
  static async processResponse(app, response) {
    var _a, _b;
    const contentType = (((_a = response.headers) == null ? void 0 : _a["content-type"]) || ((_b = response.headers) == null ? void 0 : _b["Content-Type"]) || "").toLowerCase();
    if (contentType.includes("application/json")) {
      return this.formatJsonResponse(response);
    }
    if (ContentTypeUtils.isTextContent(contentType)) {
      return this.formatTextResponse(response);
    }
    return this.processBinaryResponse(app, response, contentType);
  }
  static async formatJsonResponse(response) {
    try {
      const jsonData = await response.json;
      return "```json\n" + JSON.stringify(jsonData, null, 2) + "\n```";
    } catch (error) {
      console.error("Failed to parse JSON response:", error);
      return "Failed to parse JSON response";
    }
  }
  static async formatTextResponse(response) {
    try {
      return await response.text;
    } catch (error) {
      console.error("Failed to get text response:", error);
      return "Failed to get text response";
    }
  }
  static async processBinaryResponse(app, response, contentType) {
    var _a;
    try {
      const buffer = await response.arrayBuffer;
      const filename = FileUtils.generateFilename(contentType);
      const attachmentFolder = ((_a = app.vault.config) == null ? void 0 : _a.attachmentFolderPath) || "attachments";
      try {
        await app.vault.createFolder(attachmentFolder);
      } catch (error) {
      }
      const file = await app.vault.createBinary(
        `${attachmentFolder}/${filename}`,
        buffer
      );
      return `![[${file.name}]]`;
    } catch (error) {
      console.error("Failed to process binary response:", error);
      return "Failed to process binary response";
    }
  }
};

// src/utils/UrlUtils.ts
var UrlUtils = class {
  static validateUrl(url) {
    try {
      const parsedUrl = new URL(url);
      return parsedUrl.protocol === "http:" || parsedUrl.protocol === "https:";
    } catch (e) {
      return false;
    }
  }
};

// src/ui/VariableNoteModal.ts
var import_obsidian7 = require("obsidian");

// src/services/VariableNoteService.ts
var VariableNoteService = class {
  static async findVariableNotes(vault, metadataCache) {
    const notes = [];
    const markdownFiles = vault.getMarkdownFiles();
    for (const file of markdownFiles) {
      const metadata = metadataCache.getFileCache(file);
      const frontmatter = metadata == null ? void 0 : metadata.frontmatter;
      if ((frontmatter == null ? void 0 : frontmatter["post-webhook"]) === true) {
        const content = await vault.read(file);
        const variables = this.parseVariables(content);
        notes.push({
          title: file.basename,
          path: file.path,
          variables
        });
      }
    }
    return notes;
  }
  static parseVariables(content) {
    const variables = {};
    const lines = content.split("\n");
    let currentKey = null;
    let currentValue = [];
    for (const line of lines) {
      const match = line.match(/^--([\w_]+)/);
      if (match) {
        if (currentKey) {
          variables[currentKey] = currentValue.join("\n").trim();
          currentValue = [];
        }
        currentKey = match[1];
      } else if (currentKey) {
        currentValue.push(line);
      }
    }
    if (currentKey) {
      variables[currentKey] = currentValue.join("\n").trim();
    }
    return variables;
  }
};

// src/ui/components/VariableNoteSuggester.ts
var import_obsidian6 = require("obsidian");
var VariableNoteSuggester = class extends import_obsidian6.FuzzySuggestModal {
  constructor(app, notes, onChoose) {
    super(app);
    this.notes = notes;
    this.onChoose = onChoose;
  }
  getItems() {
    return this.notes;
  }
  getItemText(item) {
    return item.title;
  }
  onChooseItem(item) {
    this.onChoose(item);
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.item.title });
    el.createEl("small", { text: item.item.path });
  }
};

// src/ui/VariableNoteModal.ts
var VariableNoteModal = class extends import_obsidian7.Modal {
  constructor(app, onSubmit, onCancel) {
    super(app);
    this.notes = [];
    this.selectedNote = null;
    this.wasSubmitted = false;
    this.onSubmit = onSubmit;
    this.onCancel = onCancel;
  }
  async onOpen() {
    try {
      this.notes = await VariableNoteService.findVariableNotes(this.app.vault, this.app.metadataCache);
      if (this.notes.length === 0) {
        this.contentEl.createEl("div", { text: "No context notes found. Add post-webhook: true to note frontmatter." });
        return;
      }
      this.wasSubmitted = true;
      this.close();
      new VariableNoteSuggester(
        this.app,
        this.notes,
        (note) => {
          this.selectedNote = note;
          this.onSubmit(note);
        }
      ).open();
    } catch (error) {
      this.contentEl.createEl("div", { text: "Error loading context notes." });
      console.error("Error loading context notes:", error);
    }
  }
  onClose() {
    if (!this.wasSubmitted) {
      this.onCancel();
    }
    this.contentEl.empty();
  }
};

// src/services/WebhookService.ts
var WebhookService = class {
  static async sendContent(app, webhookUrl, content, filename, file, selectedText) {
    var _a;
    if (!webhookUrl) {
      throw new Error("Webhook URL is required");
    }
    if (!UrlUtils.validateUrl(webhookUrl)) {
      throw new Error("Invalid Webhook URL. Must be a valid HTTP or HTTPS URL");
    }
    try {
      const plugin = (_a = app.plugins) == null ? void 0 : _a.getPlugin("post-webhook");
      const webhook = plugin == null ? void 0 : plugin.settings.webhooks.find((w) => w.url === webhookUrl);
      let variableNote = null;
      if (webhook == null ? void 0 : webhook.includeVariableNote) {
        variableNote = await new Promise((resolve) => {
          new VariableNoteModal(
            app,
            (note) => resolve(note),
            () => resolve(null)
          ).open();
        });
        if (!variableNote) {
          throw new Error("Variable note selection cancelled");
        }
      }
      const attachments = await AttachmentService.getAttachments(app, file, webhook == null ? void 0 : webhook.excludeAttachments);
      const payload = PayloadService.createPayload(content, filename, attachments, selectedText, variableNote);
      const response = await (0, import_obsidian8.requestUrl)({
        url: webhookUrl,
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify(payload)
      });
      if (response.status >= 400) {
        throw new Error(`Request failed: ${response.status}`);
      }
      const processedResponse = await ResponseHandler.processResponse(app, response);
      return {
        status: response.status,
        text: processedResponse
      };
    } catch (error) {
      if (error.message === "Variable note selection cancelled") {
        throw error;
      }
      if (error.message.includes("Failed to fetch")) {
        throw new Error("Could not connect to the Webhook URL. Please check your internet connection and the URL");
      }
      throw new Error(`Failed to send Webhook: ${error.message}`);
    }
  }
};

// src/commands/WebhookCommands.ts
var WebhookCommands = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.registeredCommands = /* @__PURE__ */ new Set();
    this.selectionCache = new SelectionCache();
  }
  registerCommands() {
    this.unregisterCommands();
    this.plugin.settings.webhooks.forEach((webhook) => {
      const noteCommandId = `post-webhook-note-${webhook.id}`;
      this.plugin.addCommand({
        id: noteCommandId,
        name: `Send note to ${webhook.name}`,
        callback: async () => {
          const activeFile = this.plugin.app.workspace.getActiveFile();
          if (!activeFile) {
            new import_obsidian9.Notice("No active file");
            return;
          }
          try {
            const content = await this.plugin.app.vault.read(activeFile);
            const response = await WebhookService.sendContent(
              this.plugin.app,
              webhook.url,
              content,
              activeFile.name,
              activeFile
            );
            if (webhook.attachResponse && response.text) {
              const newContent = `${content}

${response.text}`;
              await this.plugin.app.vault.modify(activeFile, newContent);
            }
            new import_obsidian9.Notice(`Note sent to ${webhook.name}`);
          } catch (error) {
            new import_obsidian9.Notice(`Failed to send note: ${error instanceof Error ? error.message : String(error)}`);
          }
        }
      });
      this.registeredCommands.add(noteCommandId);
      const selectionCommandId = `post-webhook-selection-${webhook.id}`;
      this.plugin.addCommand({
        id: selectionCommandId,
        name: `Send selection to ${webhook.name}`,
        editorCallback: async (editor) => {
          const activeFile = this.plugin.app.workspace.getActiveFile();
          if (!activeFile) {
            new import_obsidian9.Notice("No active file");
            return;
          }
          const selection = editor.getSelection();
          if (!selection) {
            new import_obsidian9.Notice("No text selected");
            return;
          }
          try {
            const content = await this.plugin.app.vault.read(activeFile);
            const response = await WebhookService.sendContent(
              this.plugin.app,
              webhook.url,
              content,
              activeFile.name,
              activeFile,
              selection
            );
            if (webhook.attachResponse && response.text) {
              const selectionRange = editor.listSelections()[0];
              const end = selectionRange.head.line > selectionRange.anchor.line ? selectionRange.head : selectionRange.anchor;
              editor.replaceRange(`
${response.text}`, end);
            }
            new import_obsidian9.Notice(`Selection sent to ${webhook.name}`);
          } catch (error) {
            new import_obsidian9.Notice(`Failed to send selection: ${error instanceof Error ? error.message : String(error)}`);
          }
        }
      });
      this.registeredCommands.add(selectionCommandId);
    });
  }
  unregisterCommands() {
    this.registeredCommands.forEach((commandId) => {
      this.plugin.app.commands.removeCommand(commandId);
    });
    this.registeredCommands.clear();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  webhooks: [{
    id: "default",
    name: "Default Webhook",
    url: "",
    attachResponse: false
  }],
  includeVariableNote: false
};
var PostWebhookPlugin = class extends import_obsidian10.Plugin {
  async onload() {
    await this.loadSettings();
    this.webhookCommands = new WebhookCommands(this);
    this.webhookCommands.registerCommands();
    this.addSettingTab(new WebhookSettingsTab(this.app, this));
  }
  onunload() {
    var _a, _b;
    (_b = (_a = this.webhookCommands) == null ? void 0 : _a.selectionCache) == null ? void 0 : _b.destroy();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    var _a;
    await this.saveData(this.settings);
    (_a = this.webhookCommands) == null ? void 0 : _a.registerCommands();
  }
};
//# sourceMappingURL=data:application/json;base64,
