/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// src/settings/WebhookSettingsTab.js
var require_WebhookSettingsTab = __commonJS({
  "src/settings/WebhookSettingsTab.js"(exports2, module2) {
    var { PluginSettingTab, Setting, Notice, requestUrl } = require("obsidian");
    var WebhookSettingsTab2 = class extends PluginSettingTab {
      constructor(app2, plugin) {
        super(app2, plugin);
        this.plugin = plugin;
      }
      display() {
        const { containerEl } = this;
        containerEl.empty();
        const webhooksContainer = containerEl.createDiv("webhooks-container");
        this.plugin.settings.webhooks.forEach((webhook, index) => {
          const webhookContainer = webhooksContainer.createDiv("webhook-container");
          webhookContainer.dataset.webhookId = webhook.id;
          if (index > 0) {
            const separator = webhookContainer.createEl("hr");
            separator.style.margin = "1em 0";
            separator.style.border = "none";
            separator.style.borderTop = "1px solid var(--background-modifier-border)";
          }
          this.createNameSetting(webhook, webhookContainer);
          this.createUrlSetting(webhook, webhookContainer);
          this.createResponseSetting(webhook, webhookContainer);
          this.createTestButton(webhook, webhookContainer);
          if (this.plugin.settings.webhooks.length > 1) {
            this.createRemoveButton(webhook, index, webhookContainer);
          }
        });
        const addWebhookContainer = containerEl.createDiv("add-webhook-container");
        addWebhookContainer.style.marginTop = "2em";
        new Setting(addWebhookContainer).setName("Add New Webhook").setDesc("Add another Webhook configuration").addButton((button) => button.setButtonText("+ Add Webhook").onClick(async () => {
          const newId = `webhook-${Date.now()}`;
          const newWebhook = {
            id: newId,
            name: "New Webhook",
            url: "",
            attachResponse: false
          };
          this.plugin.settings.webhooks.push(newWebhook);
          await this.plugin.saveSettings();
          this.display();
        }));
      }
      createNameSetting(webhook, container) {
        const setting = new Setting(container).setName("Webhook Name").setDesc("Enter a name for this Webhook").addText((text) => text.setPlaceholder("My Webhook").setValue(webhook.name).onChange(async (value) => {
          webhook.name = value;
          await this.plugin.saveSettings();
        }));
        setting.settingEl.style.borderTop = "none";
      }
      createUrlSetting(webhook, container) {
        new Setting(container).setName("Webhook URL").setDesc("Enter the URL where your notes will be sent").addText((text) => text.setPlaceholder("https://your-webhook-url").setValue(webhook.url).onChange(async (value) => {
          webhook.url = value;
          await this.plugin.saveSettings();
        }));
      }
      createResponseSetting(webhook, container) {
        new Setting(container).setName("Attach Response").setDesc("Append webhook response to the note").addToggle((toggle) => toggle.setValue(webhook.attachResponse).onChange(async (value) => {
          webhook.attachResponse = value;
          await this.plugin.saveSettings();
        }));
      }
      createTestButton(webhook, container) {
        new Setting(container).setName("Test Webhook").setDesc("Send a test request to verify your Webhook configuration").addButton((button) => button.setButtonText("Test Webhook").onClick(async () => {
          if (!webhook.url) {
            new Notice("Please configure Webhook URL first");
            return;
          }
          try {
            const testPayload = {
              test: true,
              timestamp: Date.now(),
              message: "Test Webhook from Obsidian"
            };
            const response = await requestUrl({
              url: webhook.url,
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
              },
              body: JSON.stringify(testPayload)
            });
            if (response.status < 400) {
              new Notice(`Test Webhook sent successfully to ${webhook.name}`);
            } else {
              throw new Error(`HTTP ${response.status}`);
            }
          } catch (error) {
            new Notice(`Test failed: ${error.message}`);
          }
        }));
      }
      createRemoveButton(webhook, index, container) {
        new Setting(container).setName("Remove Webhook").setDesc("Delete this Webhook configuration").addButton((button) => button.setButtonText("Remove").setWarning().onClick(async () => {
          this.plugin.settings.webhooks = this.plugin.settings.webhooks.filter((_, i) => i !== index);
          await this.plugin.saveSettings();
          this.display();
        }));
      }
    };
    module2.exports = WebhookSettingsTab2;
  }
});

// src/services/ResponseHandler.js
var require_ResponseHandler = __commonJS({
  "src/services/ResponseHandler.js"(exports2, module2) {
    var { TFile } = require("obsidian");
    var ResponseHandler = class {
      static async processResponse(app2, response) {
        var _a;
        const contentType = ((_a = response.headers) == null ? void 0 : _a["content-type"]) || "";
        if (contentType.includes("application/json")) {
          return this.handleJsonResponse(response);
        }
        if (contentType.includes("text/")) {
          return this.handleTextResponse(response);
        }
        return this.handleBinaryResponse(app2, response);
      }
      static async handleJsonResponse(response) {
        const jsonData = response.json;
        return "```json\n" + JSON.stringify(jsonData, null, 2) + "\n```";
      }
      static async handleTextResponse(response) {
        return response.text;
      }
      static async handleBinaryResponse(app2, response) {
        const buffer = await response.arrayBuffer;
        const filename = this.generateFilename(response);
        const file = await app2.vault.createBinary(
          `${app2.vault.config.attachmentFolderPath}/${filename}`,
          buffer
        );
        return `![[${file.name}]]`;
      }
      static generateFilename(response) {
        var _a, _b;
        const contentDisposition = (_a = response.headers) == null ? void 0 : _a["content-disposition"];
        const defaultExt = this.getExtensionFromContentType((_b = response.headers) == null ? void 0 : _b["content-type"]);
        if (contentDisposition) {
          const match = contentDisposition.match(/filename="?([^"]+)"?/);
          if (match)
            return match[1];
        }
        return `response-${Date.now()}${defaultExt}`;
      }
      static getExtensionFromContentType(contentType = "") {
        const mimeToExt = {
          // Images
          "image/png": ".png",
          "image/jpeg": ".jpg",
          "image/jpg": ".jpg",
          "image/gif": ".gif",
          "image/webp": ".webp",
          "image/svg+xml": ".svg",
          "image/bmp": ".bmp",
          "image/tiff": ".tiff",
          // Audio
          "audio/mpeg": ".mp3",
          "audio/mp3": ".mp3",
          "audio/wav": ".wav",
          "audio/wave": ".wav",
          "audio/x-wav": ".wav",
          "audio/ogg": ".ogg",
          "audio/opus": ".opus",
          "audio/aac": ".aac",
          "audio/mp4": ".m4a",
          "audio/x-m4a": ".m4a",
          "audio/flac": ".flac",
          // Video
          "video/mp4": ".mp4",
          "video/mpeg": ".mpeg",
          "video/webm": ".webm",
          "video/ogg": ".ogv",
          "video/quicktime": ".mov",
          "video/x-msvideo": ".avi",
          "video/x-matroska": ".mkv",
          // Documents
          "application/pdf": ".pdf",
          "application/msword": ".doc",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ".docx",
          "application/vnd.ms-excel": ".xls",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ".xlsx",
          "application/vnd.ms-powerpoint": ".ppt",
          "application/vnd.openxmlformats-officedocument.presentationml.presentation": ".pptx",
          // Archives
          "application/zip": ".zip",
          "application/x-rar-compressed": ".rar",
          "application/x-7z-compressed": ".7z",
          "application/x-tar": ".tar",
          "application/gzip": ".gz",
          // Other
          "application/json": ".json",
          "application/xml": ".xml",
          "text/plain": ".txt",
          "text/csv": ".csv",
          "text/markdown": ".md"
        };
        for (const [mime, ext] of Object.entries(mimeToExt)) {
          if (contentType.includes(mime))
            return ext;
        }
        return ".bin";
      }
    };
    module2.exports = ResponseHandler;
  }
});

// src/services/WebhookService.js
var require_WebhookService = __commonJS({
  "src/services/WebhookService.js"(exports2, module2) {
    var { requestUrl, arrayBufferToBase64, parseYaml, getFrontMatterInfo } = require("obsidian");
    var ResponseHandler = require_ResponseHandler();
    var WebhookService = class {
      static validateUrl(url) {
        try {
          const parsedUrl = new URL(url);
          return parsedUrl.protocol === "http:" || parsedUrl.protocol === "https:";
        } catch (e) {
          return false;
        }
      }
      static parseYamlFrontmatter(content) {
        const info = getFrontMatterInfo(content);
        if (!info.exists) {
          return {
            frontmatter: {},
            content
          };
        }
        const frontmatter = parseYaml(info.frontmatter);
        const contentWithoutFrontmatter = content.slice(info.contentStart);
        return {
          frontmatter,
          content: contentWithoutFrontmatter
        };
      }
      static async getAttachments(app2, file) {
        const attachments = [];
        const cache = app2.metadataCache.getFileCache(file);
        if (!cache) {
          return attachments;
        }
        const processFile = async (linkedFile) => {
          if (linkedFile && !linkedFile.children) {
            const buffer = await app2.vault.readBinary(linkedFile);
            const base64 = arrayBufferToBase64(buffer);
            const mimeType = this.getMimeType(linkedFile.extension);
            attachments.push({
              name: linkedFile.name,
              type: linkedFile.extension,
              mimeType,
              size: buffer.byteLength,
              data: `data:${mimeType};base64,${base64}`,
              path: linkedFile.path
            });
          }
        };
        if (cache.embeds) {
          for (const embed of cache.embeds) {
            if (embed.link) {
              const linkedFile = app2.metadataCache.getFirstLinkpathDest(embed.link, file.path);
              if (linkedFile) {
                await processFile(linkedFile);
              }
            }
          }
        }
        if (cache.links) {
          for (const link of cache.links) {
            if (link.link) {
              const linkedFile = app2.metadataCache.getFirstLinkpathDest(link.link, file.path);
              if (linkedFile) {
                await processFile(linkedFile);
              }
            }
          }
        }
        return attachments;
      }
      static getMimeType(extension) {
        const mimeTypes = {
          png: "image/png",
          jpg: "image/jpeg",
          jpeg: "image/jpeg",
          gif: "image/gif",
          webp: "image/webp",
          svg: "image/svg+xml",
          mp3: "audio/mpeg",
          wav: "audio/wav",
          ogg: "audio/ogg",
          m4a: "audio/mp4",
          mp4: "video/mp4",
          webm: "video/webm",
          ogv: "video/ogg",
          mov: "video/quicktime",
          pdf: "application/pdf",
          doc: "application/msword",
          docx: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          json: "application/json",
          xml: "application/xml",
          zip: "application/zip"
        };
        return mimeTypes[extension == null ? void 0 : extension.toLowerCase()] || "application/octet-stream";
      }
      static async sendContent(app2, webhookUrl, content, filename, file, selectedText = null) {
        if (!webhookUrl) {
          throw new Error("Webhook URL is required");
        }
        if (!this.validateUrl(webhookUrl)) {
          throw new Error("Invalid Webhook URL. Must be a valid HTTP or HTTPS URL");
        }
        try {
          const info = getFrontMatterInfo(content);
          const attachments = await this.getAttachments(app2, file);
          let payload;
          if (info.exists) {
            const frontmatter = parseYaml(info.frontmatter);
            const noteContent = selectedText || content.slice(info.contentStart).trim();
            payload = {
              ...frontmatter,
              content: noteContent,
              filename,
              timestamp: Date.now(),
              attachments
            };
          } else {
            payload = {
              content: selectedText || content,
              filename,
              timestamp: Date.now(),
              attachments
            };
          }
          const response = await requestUrl({
            url: webhookUrl,
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify(payload)
          });
          if (response.status >= 400) {
            throw new Error(`Request failed: ${response.status}`);
          }
          const processedResponse = await ResponseHandler.processResponse(app2, response);
          return {
            status: response.status,
            text: processedResponse
          };
        } catch (error) {
          if (error.message.includes("Failed to fetch")) {
            throw new Error("Could not connect to the Webhook URL. Please check your internet connection and the URL");
          }
          throw new Error(`Failed to send Webhook: ${error.message}`);
        }
      }
    };
    module2.exports = WebhookService;
  }
});

// src/utils/SelectionCache.js
var require_SelectionCache = __commonJS({
  "src/utils/SelectionCache.js"(exports2, module2) {
    var SelectionCache = class {
      constructor() {
        this.cache = {
          text: "",
          timestamp: 0
        };
        this.CACHE_TIMEOUT = 5e3;
        this.setupMutationObserver();
        this.setupSelectionListener();
      }
      setupMutationObserver() {
        this.observer = new MutationObserver(() => {
          this.updateFromEditor();
        });
        this.observer.observe(document.body, {
          childList: true,
          subtree: true,
          characterData: true
        });
      }
      setupSelectionListener() {
        document.addEventListener("selectionchange", () => {
          this.updateFromEditor();
        });
      }
      updateFromEditor() {
        var _a, _b;
        const activeLeaf = (_a = app == null ? void 0 : app.workspace) == null ? void 0 : _a.activeLeaf;
        const editor = (_b = activeLeaf == null ? void 0 : activeLeaf.view) == null ? void 0 : _b.editor;
        if (editor && editor.getSelection) {
          const selection = editor.getSelection();
          if (selection) {
            this.updateCache(selection);
          }
        }
      }
      updateCache(text) {
        this.cache = {
          text,
          timestamp: Date.now()
        };
      }
      getSelection() {
        var _a, _b;
        const activeLeaf = (_a = app == null ? void 0 : app.workspace) == null ? void 0 : _a.activeLeaf;
        const editor = (_b = activeLeaf == null ? void 0 : activeLeaf.view) == null ? void 0 : _b.editor;
        if (editor && editor.getSelection) {
          const selection = editor.getSelection();
          if (selection) {
            return selection;
          }
        }
        const currentTime = Date.now();
        if (currentTime - this.cache.timestamp < this.CACHE_TIMEOUT) {
          return this.cache.text;
        }
        return "";
      }
      destroy() {
        if (this.observer) {
          this.observer.disconnect();
        }
      }
    };
    module2.exports = SelectionCache;
  }
});

// src/commands/WebhookCommands.js
var require_WebhookCommands = __commonJS({
  "src/commands/WebhookCommands.js"(exports2, module2) {
    var { Notice } = require("obsidian");
    var WebhookService = require_WebhookService();
    var SelectionCache = require_SelectionCache();
    var WebhookCommands2 = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.registeredCommands = /* @__PURE__ */ new Set();
        this.selectionCache = new SelectionCache();
      }
      registerCommands() {
        this.unregisterCommands();
        this.plugin.settings.webhooks.forEach((webhook) => {
          const noteCommandId = `send-to-webhook-${webhook.id}`;
          const noteCommand = {
            id: noteCommandId,
            name: `Send Note to ${webhook.name}`,
            callback: async () => {
              const file = this.plugin.app.workspace.getActiveFile();
              if (!file) {
                new Notice("No active file");
                return;
              }
              try {
                const content = await this.plugin.app.vault.read(file);
                const response = await WebhookService.sendContent(
                  this.plugin.app,
                  webhook.url,
                  content,
                  file.name,
                  file
                );
                if (webhook.attachResponse && response.text) {
                  const responseContent = `

---
${response.text}`;
                  const newContent = content + responseContent;
                  await this.plugin.app.vault.modify(file, newContent);
                }
                new Notice(`Successfully sent to ${webhook.name}`);
              } catch (error) {
                console.error("Webhook error:", error);
                new Notice(`Error: ${error.message}`);
              }
            }
          };
          this.plugin.addCommand(noteCommand);
          this.registeredCommands.add(noteCommandId);
          const selectionCommandId = `send-selection-to-webhook-${webhook.id}`;
          const selectionCommand = {
            id: selectionCommandId,
            name: `Send Selection to ${webhook.name}`,
            callback: async () => {
              const file = this.plugin.app.workspace.getActiveFile();
              if (!file) {
                new Notice("No active file");
                return;
              }
              const selection = this.selectionCache.getSelection();
              if (!selection) {
                new Notice("No text selected");
                return;
              }
              try {
                const fullContent = await this.plugin.app.vault.read(file);
                const response = await WebhookService.sendContent(
                  this.plugin.app,
                  webhook.url,
                  fullContent,
                  `${file.name} (selection)`,
                  file,
                  selection
                );
                if (webhook.attachResponse && response.text) {
                  const selectionIndex = fullContent.indexOf(selection);
                  if (selectionIndex !== -1) {
                    const responseContent = `
${response.text}`;
                    const newContent = fullContent.substring(0, selectionIndex + selection.length) + responseContent + fullContent.substring(selectionIndex + selection.length);
                    await this.plugin.app.vault.modify(file, newContent);
                  }
                }
                new Notice(`Successfully sent selection to ${webhook.name}`);
              } catch (error) {
                console.error("Webhook error:", error);
                new Notice(`Error: ${error.message}`);
              }
            }
          };
          this.plugin.addCommand(selectionCommand);
          this.registeredCommands.add(selectionCommandId);
        });
      }
      unregisterCommands() {
        this.registeredCommands.forEach((commandId) => {
          const command = this.plugin.app.commands.commands[commandId];
          if (command) {
            this.plugin.app.commands.removeCommand(commandId);
          }
        });
        this.registeredCommands.clear();
      }
    };
    module2.exports = WebhookCommands2;
  }
});

// src/main.js
var { Plugin } = require("obsidian");
var WebhookSettingsTab = require_WebhookSettingsTab();
var WebhookCommands = require_WebhookCommands();
var PostWebhookPlugin = class extends Plugin {
  async onload() {
    await this.loadSettings();
    this.webhookCommands = new WebhookCommands(this);
    this.webhookCommands.registerCommands();
    this.addSettingTab(new WebhookSettingsTab(this.app, this));
  }
  onunload() {
    var _a;
    if ((_a = this.webhookCommands) == null ? void 0 : _a.selectionCache) {
      this.webhookCommands.selectionCache.destroy();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, {
      webhooks: [{
        id: "default",
        name: "Default Webhook",
        url: "",
        attachResponse: false
      }]
    }, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.webhookCommands) {
      this.webhookCommands.registerCommands();
    }
  }
};
module.exports = PostWebhookPlugin;
//# sourceMappingURL=data:application/json;base64,
